%   Copyright (C) 2011 Michele Tavella <tavella.michele@gmail.com>
%
%   This file is part of the mexcnbiloop wrapper
%
%   The libndf library is free software: you can redistribute it and/or
%   modify it under the terms of the version 3 of the GNU General Public
%   License as published by the Free Software Foundation.
%
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%
%   You should have received a copy of the GNU General Public License
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.

$ #include <libcnbiloop/ClLoop.hpp>
$ #include <libcnbicore/CcBasic.hpp>
$ #include <libcnbicore/CcFile.hpp>
$ #include <cstring>
$ #include <iostream>
$ #include <stdio.h>

@function [c] = cl_new();
	$ ClLoop* clnew(void) {
	$ 	ClLoop* loop = new ClLoop();
	$ 	return loop;
	$ }
	# ClLoop *c = clnew();

@function [c] = cl_delete(c)
	# delete(ClLoop* c);

@function [status] = cl_connect(c, nameserver)
	$ bool clconnect(ClLoop* q, char* nameserver) {
	$ 	std::string ns(nameserver);
	$	return q->Connect(ns);
	$ }
	if(nargin < 2)
		nameserver = '127.0.0.1:8000';
	end
	# bool status = clconnect(ClLoop* c, cstring nameserver[128]);

@function cl_disconnect(c)
	$ void cldisconnect(ClLoop* q) {
	$	q->Disconnect();
	$ }
	# cldisconnect(ClLoop* c);

@function [status] = cl_isconnected(c)
	$ bool clisconnected(ClLoop* q) {
	$	return q->IsConnected();
	$ }
	# bool status = clisconnected(ClLoop* c);

@function [address] = cl_query(c, name)
	$ void clquery(ClLoop* q, char* name, char* addr) {
	$	std::string nm(name);
	$	std::string ad = q->nameserver.Query(nm);
	$	strcpy(addr, ad.c_str());
	$ }
	address = '';
	# clquery(ClLoop* c, cstring name[1024], inout cstring address[1024]);

@function [status] = cl_set(c, name, address)
	$ bool clset(ClLoop* q, char* name, char* addr) {
	$	std::string nm(name), ad(addr);
	$	return(q->nameserver.Set(nm, ad) == ClNamesLang::Successful);
	$ }
	# bool status = clset(ClLoop* c, cstring name[1024], cstring address[1024]);

@function [status] = cl_unset(c, name)
	$ bool clunset(ClLoop* q, char* name) {
	$	std::string nm(name);
	$	return(q->nameserver.Unset(nm) == ClNamesLang::Successful);
	$ }
	# bool status = clunset(ClLoop* c, cstring name[1024]);


@function [content] = cl_retrieve(c, name)
	$ void clretrieve(ClLoop* q, char* name, char* content) {
	$	std::string nm(name);
	$	std::string cn = q->nameserver.Retrieve(nm);
	$	strcpy(content, cn.c_str());
	$ }
	content = '';
	# clretrieve(ClLoop* c, cstring name[1024], inout cstring content[10240]);

@function [status] = cl_store(c, name, content)
	$ bool clstore(ClLoop* q, char* name, char* content) {
	$	std::string nm(name), cn(content);
	$	return(q->nameserver.Store(nm, cn) == ClNamesLang::Successful);
	$ }
	# bool status = clstore(ClLoop* c, cstring name[1024], cstring content[10240]);

@function [status] = cl_erase(c, name)
	$ bool clerase(ClLoop* q, char* name) {
	$	std::string nm(name);
	$	return(q->nameserver.Erase(nm) == ClNamesLang::Successful);
	$ }
	# bool status = clerase(ClLoop* c, cstring name[1024]);


