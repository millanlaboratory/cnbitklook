%   Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
%   Michele Tavella <michele.tavella@epfl.ch>
%
%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
%
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%
%   You should have received a copy of the GNU General Public License
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.


$ #include <cnbiloop/ClLoop.hpp>
$ #include <cnbicore/CcBasic.hpp>
$ #include <cnbicore/CcFile.hpp>
$ #include <cstring>
$ #include <iostream>
$ #include <stdio.h>

@function [c] = cl_new();
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>

	$ ClLoop* clnew(void) {
	$ 	ClLoop* loop = ClLoop::Instance();
	$ 	return loop;
	$ }
	# ClLoop *c = clnew();

@function [status] = cl_connect(c, nameserver)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clconnect(ClLoop* q, std::string* nameserver) {
	$   if(nameserver->empty() == true)
	$		return q->Connect();
	$	else
	$		return q->Connect(*nameserver);
	$ }
	if(nargin < 2)
		nameserver = '';
	end
	# std::string* tnameserver = new std::string(cstring nameserver);
	# bool status = clconnect(ClLoop* c, std::string* tnameserver);

@function cl_disconnect(c)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ void cldisconnect(ClLoop* q) {
	$	q->Disconnect();
	$ }
	# cldisconnect(ClLoop* c);

@function [status] = cl_isconnected(c)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clisconnected(ClLoop* q) {
	$	return q->IsConnected();
	$ }
	# bool status = clisconnected(ClLoop* c);

@function [address] = cl_query(c, name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ void clquery(ClLoop* q, std::string* name, char* addr) {
	$	std::string ad = q->nameserver.Query(*name);
	$	strcpy(addr, ad.c_str());
	$ }
	address = '';
	# std::string* tname = new std::string(cstring name);
	# clquery(ClLoop* c, std::string* tname, inout cstring address[1024]);

@function [status] = cl_set(c, name, address)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clset(ClLoop* q, std::string* name, std::string* addr) {
	$	return(q->nameserver.Set(*name, *addr) == ClNamesLang::Successful);
	$ }
	# std::string* tname = new std::string(cstring name);
	# std::string* taddress = new std::string(cstring address);
	# bool status = clset(ClLoop* c, std::string* tname, std::string* taddress);

@function [status] = cl_unset(c, name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clunset(ClLoop* q, std::string* name) {
	$	return(q->nameserver.Unset(*name) == ClNamesLang::Successful);
	$ }
	# std::string* tname = new std::string(cstring name);
	# bool status = clunset(ClLoop* c, std::string* tname);

@function [status] = cl_store(c, name, content)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clstore(ClLoop* q, std::string* name, std::string* content) {
	$	return(q->nameserver.Store(*name, *content) == ClNamesLang::Successful);
	$ }
	# std::string* tname = new std::string(cstring name);
	# std::string* tcontent = new std::string(cstring content);
	# bool status = clstore(ClLoop* c, std::string* tname, std::string* tcontent);

@function [content] = cl_retrieve(c, name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ void clretrieve(ClLoop* q, std::string* name, char* content) {
	$	std::string cn;
	$ 	if(q->nameserver.Retrieve(*name, &cn) == ClNamesLang::Successful)
	$		strcpy(content, cn.c_str());
	$ }
	content = '';
	# std::string* tname = new std::string(cstring name);
	# clretrieve(ClLoop* c, std::string* tname, inout cstring content[1024]);

@function [status] = cl_erase(c, name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clerase(ClLoop* q, std::string* name) {
	$	return(q->nameserver.Erase(*name) == ClNamesLang::Successful);
	$ }
	# std::string* tname = new std::string(cstring name);
	# bool status = clerase(ClLoop* c, std::string* tname);

@function [status] = cl_retrievefile(c, name, filename)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clretrievefile(ClLoop* q, std::string* name, std::string* filename) {
	$	return q->nameserver.RetrieveFile(*name, *filename);
	$ }
	# std::string* tname = new std::string(cstring name);
	# std::string* tfilename = new std::string(cstring filename);
	# bool status = clretrievefile(ClLoop* c, std::string* tname, std::string* tfilename);

@function [status] = cl_storefile(c, name, filename)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clstorefile(ClLoop* q, std::string* name, std::string* filename) {
	$	return(q->nameserver.StoreFile(*name, *filename));
	$ }
	# std::string* tname = new std::string(cstring name);
	# std::string* tfilename = new std::string(cstring filename);
	# bool status = clstorefile(ClLoop* c, std::string* tname, std::string* tfilename);

@function [status] = cl_openxdf(c, filexdf, filelog, linelog)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clopenxdf(ClLoop* q, std::string* filexdf, std::string* filelog, std::string* linelog) {
	$	return(q->acquisition.OpenXDF(*filexdf, *filelog, *linelog));
	$ }
	# std::string* tfilexdf = new std::string(cstring filexdf);
	# std::string* tfilelog = new std::string(cstring filelog);
	# std::string* tlinelog = new std::string(cstring linelog);
	# bool status = clopenxdf(ClLoop* c, std::string* tfilexdf, std::string* tfilelog, std::string* tlinelog);

@function [status] = cl_closexdf(c)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clclosexdf(ClLoop* q) {
	$	return(q->acquisition.CloseXDF());
	$ }
	# bool status = clclosexdf(ClLoop* c);

@function [isvalid] = cl_checkname(name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clcheckname(char* nm) {
	$ 	ClNamesLang language;
	$	return(language.CheckName(nm));
	$ }
	# bool isvalid = clcheckname(cstring name[1024]);

@function [status] = cl_storeconfig(c, component, name, content)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clstorecfg(ClLoop* q, std::string* component, std::string* name, std::string* content) {
	$	return q->nameserver.StoreConfig(*component, *name, *content);
	$ }
	# std::string* tname = new std::string(cstring name);
	# std::string* tcomponent = new std::string(cstring component);
	# std::string* tcontent = new std::string(cstring content);
	# bool status = clstorecfg(ClLoop* c, std::string* tcomponent, std::string* tname, std::string* tcontent);

@function [content] = cl_retrieveconfig(c, component, name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ void clretrievecfg(ClLoop* q, std::string* component, std::string* name, char* content) {
	$	std::string cn = q->nameserver.RetrieveConfig(*component, *name);
	$ 	if(cn.empty() == false)
	$		strcpy(content, cn.c_str());
	$ }
	content = '';
	# std::string* tname = new std::string(cstring name);
	# std::string* tcomponent = new std::string(cstring component);
	# clretrievecfg(ClLoop* c, std::string* tcomponent, std::string* tname, inout cstring content[1024]);

@function [status] = cl_eraseconfig(c, component, name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clerasecfg(ClLoop* q, std::string* component, std::string* name) {
	$	return(q->nameserver.EraseConfig(*component, *name) == ClNamesLang::Successful);
	$ }
	# std::string* tname = new std::string(cstring name);
	# std::string* tcomponent = new std::string(cstring component);
	# bool status = clerasecfg(ClLoop* c, std::string* tcomponent, std::string* tname);
