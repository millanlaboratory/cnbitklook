%   Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
%   Michele Tavella <michele.tavella@epfl.ch>
%
%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
%
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%
%   You should have received a copy of the GNU General Public License
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.


$ #include <cnbiloop/ClLoop.hpp>
$ #include <cnbicore/CcBasic.hpp>
$ #include <cnbicore/CcFile.hpp>
$ #include <cnbiloop/ClTobiIc.hpp>
$ #include <cnbiloop/ClTobiId.hpp>
$ #include <cstring>
$ #include <iostream>
$ #include <stdio.h>

@function [c] = cl_new();
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ ClLoop* clnew(void) {
	$ 	ClLoop* loop = ClLoop::Instance();
	$ 	return loop;
	$ }
	# ClLoop *c = clnew();

@function [status] = cl_connect(c, nameserver)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clconnect(ClLoop* q, std::string* nameserver) {
	$   if(nameserver->empty() == true)
	$		return q->Connect();
	$	else
	$		return q->Connect(*nameserver);
	$ }
	if(nargin < 2)
		nameserver = '';
	end
	# std::string* tnameserver = new std::string(cstring nameserver);
	# bool status = clconnect(ClLoop* c, std::string* tnameserver);

@function cl_disconnect(c)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ void cldisconnect(ClLoop* q) {
	$	q->Disconnect();
	$ }
	# cldisconnect(ClLoop* c);

@function [status] = cl_isconnected(c)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clisconnected(ClLoop* q) {
	$	return q->IsConnected();
	$ }
	# bool status = clisconnected(ClLoop* c);

@function [address] = cl_query(c, name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ void clquery(ClLoop* q, std::string* name, char* addr) {
	$	std::string ad = q->nameserver.Query(*name);
	$	strcpy(addr, ad.c_str());
	$ }
	address = '';
	# std::string* tname = new std::string(cstring name);
	# clquery(ClLoop* c, std::string* tname, inout cstring address[1024]);

@function [status] = cl_set(c, name, address)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clset(ClLoop* q, std::string* name, std::string* addr) {
	$	return(q->nameserver.Set(*name, *addr) == ClNmsLang::Successful);
	$ }
	# std::string* tname = new std::string(cstring name);
	# std::string* taddress = new std::string(cstring address);
	# bool status = clset(ClLoop* c, std::string* tname, std::string* taddress);

@function [status] = cl_unset(c, name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clunset(ClLoop* q, std::string* name) {
	$	return(q->nameserver.Unset(*name) == ClNmsLang::Successful);
	$ }
	# std::string* tname = new std::string(cstring name);
	# bool status = clunset(ClLoop* c, std::string* tname);

@function [status] = cl_store(c, name, content)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clstore(ClLoop* q, std::string* name, std::string* content) {
	$	return(q->nameserver.Store(*name, *content) == ClNmsLang::Successful);
	$ }
	# std::string* tname = new std::string(cstring name);
	# std::string* tcontent = new std::string(cstring content);
	# bool status = clstore(ClLoop* c, std::string* tname, std::string* tcontent);

@function [content] = cl_retrieve(c, name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ void clretrieve(ClLoop* q, std::string* name, char* content) {
	$	std::string cn;
	$ 	if(q->nameserver.Retrieve(*name, &cn) == ClNmsLang::Successful)
	$		strcpy(content, cn.c_str());
	$ }
	content = '';
	# std::string* tname = new std::string(cstring name);
	# clretrieve(ClLoop* c, std::string* tname, inout cstring content[1024]);

@function [status] = cl_erase(c, name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clerase(ClLoop* q, std::string* name) {
	$	return(q->nameserver.Erase(*name) == ClNmsLang::Successful);
	$ }
	# std::string* tname = new std::string(cstring name);
	# bool status = clerase(ClLoop* c, std::string* tname);

@function [status] = cl_retrievefile(c, name, filename)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clretrievefile(ClLoop* q, std::string* name, std::string* filename) {
	$	return q->nameserver.RetrieveFile(*name, *filename);
	$ }
	# std::string* tname = new std::string(cstring name);
	# std::string* tfilename = new std::string(cstring filename);
	# bool status = clretrievefile(ClLoop* c, std::string* tname, std::string* tfilename);

@function [status] = cl_storefile(c, name, filename)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clstorefile(ClLoop* q, std::string* name, std::string* filename) {
	$	return(q->nameserver.StoreFile(*name, *filename));
	$ }
	# std::string* tname = new std::string(cstring name);
	# std::string* tfilename = new std::string(cstring filename);
	# bool status = clstorefile(ClLoop* c, std::string* tname, std::string* tfilename);

@function [status] = cl_openxdf(c, filexdf, filelog, linelog)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clopenxdf(ClLoop* q, std::string* filexdf, std::string* filelog, std::string* linelog) {
	$	return(q->acquisition.OpenXDF(*filexdf, *filelog, *linelog));
	$ }
	# std::string* tfilexdf = new std::string(cstring filexdf);
	# std::string* tfilelog = new std::string(cstring filelog);
	# std::string* tlinelog = new std::string(cstring linelog);
	# bool status = clopenxdf(ClLoop* c, std::string* tfilexdf, std::string* tfilelog, std::string* tlinelog);

@function [status] = cl_closexdf(c)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clclosexdf(ClLoop* q) {
	$	return(q->acquisition.CloseXDF());
	$ }
	# bool status = clclosexdf(ClLoop* c);

@function [status] = cl_updatelog(c, linelog)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clupdatelog(ClLoop* q, std::string* linelog) {
	$	return(q->acquisition.UpdateLog(*linelog));
	$ }
	# std::string* tlinelog = new std::string(cstring linelog);
	# bool status = clupdatelog(ClLoop* c, std::string* tlinelog);

@function [isvalid] = cl_checkname(name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clcheckname(char* nm) {
	$ 	ClNmsLang language;
	$	return(language.CheckName(nm));
	$ }
	# bool isvalid = clcheckname(cstring name[1024]);

@function [status] = cl_storeconfig(c, component, name, content)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clstorecfg(ClLoop* q, std::string* component, std::string* name, std::string* content) {
	$	return q->nameserver.StoreConfig(*component, *name, *content);
	$ }
	# std::string* tname = new std::string(cstring name);
	# std::string* tcomponent = new std::string(cstring component);
	# std::string* tcontent = new std::string(cstring content);
	# bool status = clstorecfg(ClLoop* c, std::string* tcomponent, std::string* tname, std::string* tcontent);

@function [content] = cl_retrieveconfig(c, component, name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ void clretrievecfg(ClLoop* q, std::string* component, std::string* name, char* content) {
	$	std::string cn = q->nameserver.RetrieveConfig(*component, *name);
	$ 	if(cn.empty() == false)
	$		strcpy(content, cn.c_str());
	$ }
	content = '';
	# std::string* tname = new std::string(cstring name);
	# std::string* tcomponent = new std::string(cstring component);
	# clretrievecfg(ClLoop* c, std::string* tcomponent, std::string* tname, inout cstring content[1024]);

@function [status] = cl_eraseconfig(c, component, name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool clerasecfg(ClLoop* q, std::string* component, std::string* name) {
	$	return(q->nameserver.EraseConfig(*component, *name) == ClNmsLang::Successful);
	$ }
	# std::string* tname = new std::string(cstring name);
	# std::string* tcomponent = new std::string(cstring component);
	# bool status = clerasecfg(ClLoop* c, std::string* tcomponent, std::string* tname);

@function [d] = tid_new();
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ ClTobiId* tidnew(void) {
	$ 	ClTobiId* id = new ClTobiId(ClTobiId::SetGet);
	$ 	return id;
	$ }
	# ClTobiId *d = tidnew();

@function [d] = tid_new_setonly();
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ ClTobiId* tidnewsetonly(void) {
	$ 	ClTobiId* id = new ClTobiId(ClTobiId::SetOnly);
	$ 	return id;
	$ }
	# ClTobiId *d = tidnewsetonly();

@function [d] = tid_new_getonly();
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ ClTobiId* tidnewgetonly(void) {
	$ 	ClTobiId* id = new ClTobiId(ClTobiId::GetOnly);
	$ 	return id;
	$ }
	# ClTobiId *d = tidnewgetonly();

@function [d] = tid_delete(d);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ ClTobiId* tiddelete(ClTobiId* d) {
	$	if(d != NULL)
	$		delete d;
	$	d = NULL;
	$	return d;
	$ }
	# ClTobiId *d = tiddelete(ClTobiId* d);

@function [attached] = tid_attach(d, name);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool tidattach(ClTobiId* d, std::string* name) {
	$	return d->Attach(*name);
	$ }
	if(nargin == 1)
		name = '/bus';
	end
	# std::string* tname = new std::string(cstring name);
	# bool attached = tidattach(ClTobiId* d, std::string* tname);

@function [attached] = tid_detach(d);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool tiddetach(ClTobiId* d) {
	$	return d->Detach();
	$ }
	# bool attached = tiddetach(ClTobiId* d);

@function [attached] = tid_isattached(d);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool tidisattached(ClTobiId* d) {
	$	return d->IsAttached();
	$ }
	# bool attached = tidisattached(ClTobiId* d);

@function [messages] = tid_count(d);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ int tidcount(ClTobiId* d) {
	$	return d->Count();
	$ }
	# int messages = tidcount(ClTobiId* d);

@function [messages] = tid_clear(d);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ int tidclear(ClTobiId* d) {
	$	return d->Clear();
	$ }
	# int messages = tidclear(ClTobiId* d);

@function [hasmessage] = tid_getmessage(d, s);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool tidgetmessage(ClTobiId* d, IDSerializerRapid* s) {
	$	return d->GetMessage(s);
	$ }
	# bool hasmessage = tidgetmessage(ClTobiId* d, IDSerializerRapid* s);

@function [setmessage, fidx] = tid_setmessage(d, s, blockidx);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool tidsetmessage(ClTobiId* d, IDSerializerRapid* s, int blockidx, int* fidx) {
	$	return d->SetMessage(s, blockidx, fidx);
	$ }
	fidx = -1;
	# bool setmessage = tidsetmessage(ClTobiId* d, IDSerializerRapid* s, int blockidx, inout int* fidx);


@function [d] = tic_newgetonly();
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ ClTobiIc* ticnewgetonly(void) {
	$ 	ClTobiIc* id = new ClTobiIc(ClTobiIc::GetOnly);
	$ 	return id;
	$ }
	# ClTobiIc *d = ticnewgetonly();

@function [d] = tic_newsetonly();
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ ClTobiIc* ticnewsetonly(void) {
	$ 	ClTobiIc* id = new ClTobiIc(ClTobiIc::SetOnly);
	$ 	return id;
	$ }
	# ClTobiIc *d = ticnewsetonly();

@function [d] = tic_delete(d);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ ClTobiIc* ticdelete(ClTobiIc* d) {
	$	if(d != NULL)
	$		delete d;
	$	d = NULL;
	$	return d;
	$ }
	# ClTobiIc *d = ticdelete(ClTobiIc* d);

@function [attached] = tic_attach(d, name);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool ticattach(ClTobiIc* d, const std::string* name) {
	$	return d->Attach(*name);
	$ }
	# std::string* tname = new std::string(cstring name);
	# bool attached = ticattach(ClTobiIc* d, std::string* tname);

@function [attached] = tic_detach(c);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool ticdetach(ClTobiIc* c) {
	$	return c->Detach();
	$ }
	# bool attached = ticdetach(ClTobiIc* c);

@function [attached] = tic_isattached(c);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool ticisattached(ClTobiIc* c) {
	$	return c->IsAttached();
	$ }
	# bool attached = ticisattached(ClTobiIc* c);

@function [hasmessage] = tic_waitmessage(d, s);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool ticwaitmessage(ClTobiIc* d, ICSerializerRapid* s) {
	$	return(d->WaitMessage(s) == ClTobiIc::HasMessage);
	$ }
	# bool hasmessage = ticwaitmessage(ClTobiIc* d, ICSerializerRapid* s);

@function [hasmessage] = tic_getmessage(d, s);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool ticgetmessage(ClTobiIc* d, ICSerializerRapid* s) {
	$	return(d->GetMessage(s) == ClTobiIc::HasMessage);
	$ }
	# bool hasmessage = ticgetmessage(ClTobiIc* d, ICSerializerRapid* s);

@function [setmessage] = tic_setmessage(c, s, blockidx);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
	$ bool ticsetmessage(ClTobiIc* c, ICSerializerRapid* s, int blockidx) {
	$	return c->SetMessage(s, blockidx);
	$ }
	# bool setmessage = ticsetmessage(ClTobiIc* c, ICSerializerRapid* s, int blockidx);
